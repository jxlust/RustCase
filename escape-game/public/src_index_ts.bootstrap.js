/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwww"] = self["webpackChunkwww"] || []).push([["src_index_ts"],{

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/***/ (function() {

eval("var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar FillStatus;\n(function (FillStatus) {\n    FillStatus[FillStatus[\"None\"] = 0] = \"None\";\n    FillStatus[FillStatus[\"Fill\"] = 1] = \"Fill\";\n})(FillStatus || (FillStatus = {}));\nvar TreeNode = /** @class */ (function () {\n    function TreeNode(p, pre) {\n        // this.x = x;\n        // this.y = y;\n        this.p = p;\n        this.pre = pre;\n    }\n    return TreeNode;\n}());\nvar CircleCell = /** @class */ (function () {\n    function CircleCell(x, y) {\n        this.X = x;\n        this.Y = y;\n        this.isFilled = FillStatus.None;\n    }\n    CircleCell.prototype.getIsFilled = function () {\n        return this.isFilled;\n    };\n    CircleCell.prototype.setIsFilled = function () {\n        //fill\n        this.isFilled = FillStatus.Fill;\n    };\n    return CircleCell;\n}());\nvar WIDTH = 11; //every row or col cell count\nvar CELL_SIZE = WIDTH * WIDTH;\nvar CIRCLE_RADIUS = 15;\nvar START_X = 30;\nvar START_Y = 30;\nvar CELL_SPACE_X = 4;\nvar CELL_SPACE_Y = 6;\nvar RANDOM_COUNT = 3;\nvar FILL_COLOR = \"red\";\nvar CELL_COLOR = \"orange\";\n//save all circle center pointer\nvar circleList = [];\n//init random fill cell\nvar randomList = [];\n//animal position pointer\n//todo: idx may appear on the edge,need fix it\nvar animalIdx;\nvar ganmeStaus = 1; //0:end  1: playing\nvar paddingRow = START_X - CIRCLE_RADIUS;\nvar paddingCol = START_Y - CIRCLE_RADIUS;\nvar resultDom = document.getElementById(\"resultId\");\nvar stepIdDom = document.getElementById(\"stepId\");\nvar restartIdDom = document.getElementById(\"restartId\");\nvar step = 0;\nvar animalElement;\nvar myCanvas = document.getElementById(\"myCanvas\");\nvar ctx = myCanvas.getContext(\"2d\");\nvar canvasWidth = paddingRow * 2 +\n    WIDTH * 2 * CIRCLE_RADIUS +\n    (WIDTH - 1) * CELL_SPACE_X +\n    CIRCLE_RADIUS +\n    CELL_SPACE_X / 2;\nvar canvasHeight = paddingCol * 2 + WIDTH * 2 * CIRCLE_RADIUS + (WIDTH - 1) * CELL_SPACE_Y;\nmyCanvas.width = canvasWidth;\nmyCanvas.height = canvasHeight;\nfunction drawWorld() {\n    // for(let x = 0 ; x < )\n    ctx.fillStyle = \"#000000\";\n    ctx.globalAlpha = 0.2;\n    ctx.fillRect(0, 0, myCanvas.width, myCanvas.height);\n}\nfunction rng(n, start) {\n    if (start === void 0) { start = 0; }\n    return start + ((Math.random() * n) | 0);\n}\nfunction randomFillCell() {\n    var randomCount = rng(3, 8);\n    while (true) {\n        var rIndex = rng(CELL_SIZE);\n        if (!randomList.includes(rIndex) && rIndex !== animalIdx) {\n            randomList.push(rIndex);\n        }\n        if (randomList.length === randomCount) {\n            break;\n        }\n    }\n}\nfunction getAnimalData() {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            return [2 /*return*/, new Promise(function (resolve) {\n                    var animalElement = new Image();\n                    animalElement.src = \"./img/user.png\";\n                    animalElement.onload = function () {\n                        resolve(animalElement);\n                    };\n                    animalElement.onerror = function () {\n                        resolve(null);\n                    };\n                })];\n        });\n    });\n}\nfunction generateCell() { }\nfunction drawCell() {\n    ctx.globalAlpha = 1;\n    for (var x = 0; x < WIDTH; x++) {\n        for (var y = 0; y < WIDTH; y++) {\n            var pX = START_X + y * (2 * CIRCLE_RADIUS + CELL_SPACE_X);\n            var pY = START_Y + x * (2 * CIRCLE_RADIUS + CELL_SPACE_Y);\n            if (x % 2 === 1) {\n                pX += CIRCLE_RADIUS + CELL_SPACE_X / 2;\n            }\n            var pIndex = x * WIDTH + y;\n            var cell = new CircleCell(pX, pY);\n            var fillColor = CELL_COLOR;\n            if (randomList.includes(pIndex)) {\n                cell.setIsFilled();\n                fillColor = FILL_COLOR;\n            }\n            circleList.push(cell);\n            ctx.fillStyle = fillColor;\n            ctx.beginPath();\n            ctx.arc(pX, pY, CIRCLE_RADIUS, 0, 2 * Math.PI);\n            ctx.fill();\n        }\n    }\n}\nfunction fillLastAnimal(lastIdx) {\n    var circleCell = getPoint(lastIdx);\n    var _a = [circleCell.X, circleCell.Y], pX = _a[0], pY = _a[1];\n    ctx.fillStyle = CELL_COLOR;\n    ctx.beginPath();\n    ctx.arc(pX, pY, CIRCLE_RADIUS, 0, 2 * Math.PI);\n    ctx.fill();\n}\nfunction drawAnimal(nextId) {\n    return __awaiter(this, void 0, void 0, function () {\n        var imgWidth, imgOffset, circleCell, _a, pX, pY;\n        return __generator(this, function (_b) {\n            if (nextId !== undefined) {\n                //fill last\n                fillLastAnimal(animalIdx);\n                animalIdx = nextId;\n            }\n            imgWidth = 20;\n            imgOffset = 20 / 4;\n            circleCell = getPoint(animalIdx);\n            _a = [circleCell.X, circleCell.Y], pX = _a[0], pY = _a[1];\n            ctx.beginPath();\n            ctx.drawImage(animalElement, pX - CIRCLE_RADIUS + imgOffset, pY - CIRCLE_RADIUS + imgOffset, imgWidth, imgWidth);\n            return [2 /*return*/];\n        });\n    });\n}\nfunction getPoint(idx) {\n    if (idx >= 0 && idx < circleList.length) {\n        return circleList[idx];\n    }\n    return null;\n}\n/**\n *\n * @param point p\n * @param circle  circle center\n * @param r radius\n */\nfunction checkIsInCircle(point, circle, r) {\n    var xDiff = point[0] - circle[0];\n    var yDiff = point[1] - circle[1];\n    return xDiff * xDiff + yDiff * yDiff <= r * r;\n}\nfunction getClickIdx(offsetX, offsetY, lists) {\n    var idx = -1;\n    for (var i = 0, len = lists.length; i < len; ++i) {\n        var cell = lists[i];\n        var _a = [cell.X, cell.Y], pX = _a[0], pY = _a[1];\n        var isInCircle = checkIsInCircle([offsetX, offsetY], [pX, pY], CIRCLE_RADIUS);\n        if (isInCircle) {\n            idx = i;\n            break;\n        }\n    }\n    return idx;\n}\nfunction updateCellColor(idx) {\n    var circleCell = getPoint(idx);\n    if (circleCell.getIsFilled() === FillStatus.None) {\n        //not fill,to do fill this cell\n        var _a = [circleCell.X, circleCell.Y], pX = _a[0], pY = _a[1];\n        circleCell.setIsFilled();\n        ctx.fillStyle = FILL_COLOR;\n        ctx.beginPath();\n        ctx.arc(pX, pY, CIRCLE_RADIUS, 0, 2 * Math.PI);\n        ctx.fill();\n    }\n}\nfunction updateStepView() {\n    stepIdDom.innerText = \"\".concat(step);\n}\nfunction checkIsOnWallEdge(idx) {\n    var y = (idx / WIDTH) | 0;\n    var x = idx % WIDTH;\n    //is in the wall edge 边缘\n    if (x === 0 || y === 0 || x === WIDTH - 1 || y === WIDTH - 1) {\n        return true;\n    }\n    return false;\n}\n//animal 6 dir can go\nfunction animalStep() {\n    //check is can skip\n    // let isCanSkip = dfsCheckCanSkip(animalIdx);\n    var lastNode = bfsCheckPath(animalIdx);\n    if (lastNode) {\n        // change animalIdx\n        // let nbs = getNeighbors(animalIdx);\n        // let nextId = nbs[rng(nbs.length)];\n        var nextId = getOptimalPathFirstNode(lastNode);\n        drawAnimal(nextId);\n        //check animal is in the wall edge 边缘\n        if (checkIsOnWallEdge(nextId)) {\n            resultDom.innerText = \"\\u88AB\\u4F60\\u9003\\u8D70\\u4E86,\\uD83C\\uDF3A\";\n            ganmeStaus = 0;\n        }\n    }\n    else {\n        //catch  it\n        resultDom.innerText = \"\\u6293\\u4F4F\\u4F60\\u4E86\\uFF0C\\u54C8\\u54C8\\u54C8\\uFF01\\uD83D\\uDE06\";\n        ganmeStaus = 0;\n    }\n}\nfunction getNeighbors(idx) {\n    // (x,y) => 6 kinds dir\n    // (x-1,y) (x+1,y)\n    //方向这里还需要根据奇偶性判断\n    // y 奇数行\n    //(x,y-1) (x+1,y-1)\n    //(x,y+1) (x+1,y+1)\n    // y 偶数行\n    //(x-1,y-1) (x,y-1)\n    //(x-1,y+1) (x,y+1)\n    var y = (idx / WIDTH) | 0;\n    var x = idx % WIDTH;\n    var neighbors = [];\n    if (x - 1 >= 0) {\n        //left\n        if (circleList[idx - 1].getIsFilled() === FillStatus.None) {\n            neighbors.push(idx - 1);\n        }\n    }\n    if (x + 1 < WIDTH) {\n        //right\n        if (circleList[idx + 1].getIsFilled() === FillStatus.None) {\n            neighbors.push(idx + 1);\n        }\n    }\n    var colOffset1 = 0;\n    var colOffset2 = 0;\n    if (y % 2 === 1) {\n        //奇数行\n        colOffset1 = 0;\n        colOffset2 = +1;\n    }\n    else {\n        colOffset1 = -1;\n        colOffset2 = 0;\n    }\n    if (y - 1 >= 0 && x + colOffset1 >= 0) {\n        // top\n        var pos = (y - 1) * WIDTH + x + colOffset1;\n        if (circleList[pos].getIsFilled() === FillStatus.None) {\n            neighbors.push(pos);\n        }\n    }\n    if (y - 1 >= 0 && x + colOffset2 < WIDTH) {\n        //right top\n        var pos = (y - 1) * WIDTH + x + colOffset2;\n        if (circleList[pos].getIsFilled() === FillStatus.None) {\n            neighbors.push(pos);\n        }\n    }\n    if (y + 1 < WIDTH && x + colOffset1 >= 0) {\n        // bottom\n        var pos = (y + 1) * WIDTH + x + colOffset1;\n        if (circleList[pos].getIsFilled() === FillStatus.None) {\n            neighbors.push(pos);\n        }\n    }\n    if (y + 1 < WIDTH && x + colOffset2 < WIDTH) {\n        //right bottom\n        var pos = (y + 1) * WIDTH + x + colOffset2;\n        if (circleList[pos].getIsFilled() === FillStatus.None) {\n            neighbors.push(pos);\n        }\n    }\n    return neighbors;\n}\nfunction getOptimalPathFirstNode(node) {\n    var path = [];\n    var optimalIdx = -1;\n    while (node) {\n        if (!!node.pre && !node.pre.pre) {\n            optimalIdx = node.p;\n        }\n        path.unshift(node.p);\n        node = node.pre;\n    }\n    console.log(\"path:\", path);\n    return optimalIdx;\n}\nfunction bfsCheckPath(curIdx) {\n    //bfs 可以求到最短路径\n    var rootNode = new TreeNode(curIdx, null);\n    var queue = [rootNode];\n    var visited = new Set();\n    visited.add(curIdx);\n    var step = 0; //记录bfs step\n    var lastNode = null; //last node\n    while (queue.length) {\n        for (var i = queue.length - 1; i >= 0; --i) {\n            var curNode = queue.shift();\n            var curP = curNode.p;\n            var y = (curP / WIDTH) | 0;\n            var x = curP % WIDTH;\n            //is in the wall edge 边缘\n            if (x === 0 || y === 0 || x === WIDTH - 1 || y === WIDTH - 1) {\n                lastNode = curNode;\n                console.log(\"step:\", step);\n                console.log(\"last node:\", lastNode);\n                return lastNode;\n            }\n            //一层一层bfs\n            var neighbors = getNeighbors(curP);\n            for (var _i = 0, neighbors_1 = neighbors; _i < neighbors_1.length; _i++) {\n                var nbPoint = neighbors_1[_i];\n                if (!visited.has(nbPoint)) {\n                    var node = new TreeNode(nbPoint, curNode);\n                    queue.push(node);\n                    visited.add(nbPoint);\n                }\n            }\n        }\n        step++;\n    }\n    console.log(\"step:\", step);\n    console.log(\"last node:\", lastNode);\n    return lastNode;\n}\nfunction dfsCheckCanSkip(curIdx) {\n    //dfs stack\n    var stack = [curIdx];\n    var visited = new Set();\n    visited.add(curIdx);\n    while (stack.length) {\n        var cur = stack.pop();\n        var y = (cur / WIDTH) | 0;\n        var x = cur % WIDTH;\n        //is in the wall edge 边缘\n        if (x === 0 || y === 0 || x === WIDTH - 1 || y === WIDTH - 1) {\n            return true;\n        }\n        var neighbors = getNeighbors(cur);\n        for (var _i = 0, neighbors_2 = neighbors; _i < neighbors_2.length; _i++) {\n            var nb = neighbors_2[_i];\n            if (!visited.has(nb)) {\n                stack.push(nb);\n                visited.add(nb);\n            }\n        }\n    }\n    return false;\n}\nmyCanvas.addEventListener(\"click\", function (e) {\n    var offsetX = e.offsetX, offsetY = e.offsetY;\n    var idx = getClickIdx(offsetX, offsetY, circleList);\n    console.log(\"idx:\", idx);\n    if (idx >= 0 && idx !== animalIdx && ganmeStaus) {\n        //check is can skip\n        // debugger;\n        step++;\n        updateCellColor(idx);\n        updateStepView();\n        animalStep();\n    }\n});\nfunction randomFirstIdx() {\n    // while (true) {\n    //   let idx = rng(CELL_SIZE);\n    //   if (!checkIsOnWallEdge(idx)) {\n    //     animalIdx = idx;\n    //     break;\n    //   }\n    // }\n    animalIdx = (CELL_SIZE / 2) | 0;\n}\nfunction init() {\n    return __awaiter(this, void 0, void 0, function () {\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    randomFirstIdx();\n                    return [4 /*yield*/, getAnimalData()];\n                case 1:\n                    animalElement = _a.sent();\n                    randomFillCell();\n                    drawWorld();\n                    drawCell();\n                    drawAnimal();\n                    return [2 /*return*/];\n            }\n        });\n    });\n}\ninit();\nrestartIdDom.addEventListener(\"click\", function () {\n    window.location.reload();\n});\n\n\n//# sourceURL=webpack://www/./src/index.ts?");

/***/ })

}]);