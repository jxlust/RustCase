"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkwww"] = self["webpackChunkwww"] || []).push([["index_ts"],{

/***/ "../pkg/jxlust_snake_game.js":
/*!***********************************!*\
  !*** ../pkg/jxlust_snake_game.js ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Direction\": () => (/* binding */ Direction),\n/* harmony export */   \"GameStatus\": () => (/* binding */ GameStatus),\n/* harmony export */   \"World\": () => (/* binding */ World),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   \"initSync\": () => (/* binding */ initSync)\n/* harmony export */ });\n/* harmony import */ var _snippets_jxlust_snake_game_c30d71870f5a3b02_www_utils_rng_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./snippets/jxlust-snake-game-c30d71870f5a3b02/www/utils/rng.js */ \"../pkg/snippets/jxlust-snake-game-c30d71870f5a3b02/www/utils/rng.js\");\n\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n/**\n*/\nconst Direction = Object.freeze({ Up:0,\"0\":\"Up\",Right:1,\"1\":\"Right\",Down:2,\"2\":\"Down\",Left:3,\"3\":\"Left\", });\n/**\n*/\nconst GameStatus = Object.freeze({ Won:0,\"0\":\"Won\",Lost:1,\"1\":\"Lost\",Played:2,\"2\":\"Played\", });\n/**\n*/\nclass World {\n\n    static __wrap(ptr) {\n        const obj = Object.create(World.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_world_free(ptr);\n    }\n    /**\n    * @param {number} width\n    * @param {number} idx\n    * @returns {World}\n    */\n    static new(width, idx) {\n        const ret = wasm.world_new(width, idx);\n        return World.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    points() {\n        const ret = wasm.world_points(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    width() {\n        const ret = wasm.world_width(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    game_status() {\n        const ret = wasm.world_game_status(this.ptr);\n        return ret === 3 ? undefined : ret;\n    }\n    /**\n    * @returns {string}\n    */\n    game_status_text() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_game_status_text(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @returns {number | undefined}\n    */\n    food_cell() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.world_food_cell(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return r0 === 0 ? undefined : r1 >>> 0;\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {number}\n    */\n    snake_cells() {\n        const ret = wasm.world_snake_cells(this.ptr);\n        return ret;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_length() {\n        const ret = wasm.world_snake_length(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    snake_header() {\n        const ret = wasm.world_snake_header(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @param {number} dir\n    */\n    change_snake_dir(dir) {\n        wasm.world_change_snake_dir(this.ptr, dir);\n    }\n    /**\n    */\n    start_game() {\n        wasm.world_start_game(this.ptr);\n    }\n    /**\n    */\n    step() {\n        wasm.world_step(this.ptr);\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_rng_0b5147203d0af268 = function(arg0) {\n        const ret = (0,_snippets_jxlust_snake_game_c30d71870f5a3b02_www_utils_rng_js__WEBPACK_IMPORTED_MODULE_0__.rng)(arg0 >>> 0);\n        return ret;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(bytes) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    const module = new WebAssembly.Module(bytes);\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! jxlust_snake_game_bg.wasm */ \"../pkg/jxlust_snake_game_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n\n\n//# sourceURL=webpack://www/../pkg/jxlust_snake_game.js?");

/***/ }),

/***/ "../pkg/snippets/jxlust-snake-game-c30d71870f5a3b02/www/utils/rng.js":
/*!***************************************************************************!*\
  !*** ../pkg/snippets/jxlust-snake-game-c30d71870f5a3b02/www/utils/rng.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rng\": () => (/* binding */ rng)\n/* harmony export */ });\nfunction rng(num) {\n  return (Math.random() * num) | 0;\n}\n\n\n//# sourceURL=webpack://www/../pkg/snippets/jxlust-snake-game-c30d71870f5a3b02/www/utils/rng.js?");

/***/ }),

/***/ "./index.ts":
/*!******************!*\
  !*** ./index.ts ***!
  \******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! jxlust-snake-game */ \"../pkg/jxlust_snake_game.js\");\n/* harmony import */ var _utils_rng__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/rng */ \"./utils/rng.js\");\n\n\n(0,jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__[\"default\"])().then(function (wasm) {\n    var INTERVAL_TIME = 1000 / 4;\n    var WORLD_WIDTH = 16;\n    var CELL_SIZE = 20; //cell size 10\n    // const snakeSpawnIndex = Date.now() % (WORLD_WIDTH * WORLD_WIDTH);\n    var snakeSpawnIndex = (0,_utils_rng__WEBPACK_IMPORTED_MODULE_0__.rng)(WORLD_WIDTH * WORLD_WIDTH);\n    var world = jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__.World[\"new\"](WORLD_WIDTH, snakeSpawnIndex);\n    var worldWidth = world.width();\n    var playIdDom = document.getElementById(\"playId\");\n    var statusIdDom = document.getElementById(\"statusId\");\n    var pointsIdDom = document.getElementById(\"pointsId\");\n    var rafId;\n    var canvas = document.getElementById(\"snake-canvas\");\n    canvas.width = CELL_SIZE * worldWidth;\n    canvas.height = CELL_SIZE * worldWidth;\n    var ctx = canvas.getContext(\"2d\");\n    // debugger;\n    document.addEventListener(\"keydown\", function (e) {\n        // console.log(e.code);\n        switch (e.code) {\n            case \"ArrowUp\":\n                world.change_snake_dir(jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Up);\n                break;\n            case \"ArrowDown\":\n                world.change_snake_dir(jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Down);\n                break;\n            case \"ArrowRight\":\n                world.change_snake_dir(jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Right);\n                break;\n            case \"ArrowLeft\":\n                world.change_snake_dir(jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__.Direction.Left);\n                break;\n        }\n    });\n    playIdDom.addEventListener(\"click\", function (_) {\n        var gameStatus = world.game_status();\n        if (gameStatus === undefined) {\n            world.start_game();\n            loopStart();\n            playIdDom.innerText = \"Playing\";\n        }\n        else {\n            window.location.reload();\n        }\n    });\n    function drawWorld() {\n        ctx.beginPath();\n        // ctx.strokeStyle = [\"blue\",\"red\",\"yellow\"].at(colorIndex);\n        ctx.strokeStyle = \"skyblue\";\n        ctx.lineWidth = 1;\n        for (var x = 0; x < worldWidth + 1; x++) {\n            ctx.moveTo(x * CELL_SIZE, 0);\n            ctx.lineTo(x * CELL_SIZE, CELL_SIZE * worldWidth);\n        }\n        for (var y = 0; y < worldWidth + 1; y++) {\n            ctx.moveTo(0, y * CELL_SIZE);\n            ctx.lineTo(CELL_SIZE * worldWidth, CELL_SIZE * y);\n        }\n        ctx.stroke();\n    }\n    function drawSnake() {\n        var snakeCellsPtr = world.snake_cells();\n        var snakeLength = world.snake_length();\n        var snakeCells = new Int32Array(wasm.memory.buffer, snakeCellsPtr, snakeLength); //usize = 4 bytes  = 4 * 8\n        // debugger;\n        // const snakeIndex = world.snake_header();\n        //way1: filter\n        //way2: slice + reverse\n        snakeCells\n            // .filter((idx, i) => !(i > 0 && idx === snakeCells[0]))\n            .slice()\n            .reverse() //i === snakeCells.length - 1\n            .forEach(function (cellIdx, i) {\n            var color = i === snakeCells.length - 1 ? \"#a8f8f8\" : \"#000000\";\n            ctxFillCell(cellIdx, color);\n        });\n        //way3: fill header again\n        // let headerIndex = snakeCells[0];\n        // ctxFillCell(headerIndex, \"#a8f8f8\");\n        world.step();\n    }\n    function ctxFillCell(index, color) {\n        var row = (index / worldWidth) | 0;\n        var col = index % worldWidth;\n        ctx.beginPath();\n        color && (ctx.fillStyle = color);\n        ctx.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);\n        ctx.stroke();\n    }\n    function drawFoodCell() {\n        var foodIndex = world.food_cell();\n        if (foodIndex >= 0) {\n            ctxFillCell(foodIndex, \"#ff0000\");\n        }\n    }\n    function drawStatusText() {\n        if (isGameEnd()) {\n            playIdDom.textContent = \"Re-Play\";\n        }\n        statusIdDom.textContent = world.game_status_text();\n        pointsIdDom.textContent = world.points().toString();\n    }\n    function isGameEnd() {\n        return (world.game_status() === jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Won ||\n            world.game_status() === jxlust_snake_game__WEBPACK_IMPORTED_MODULE_1__.GameStatus.Lost);\n    }\n    // debugger;\n    function updatedView() {\n        console.log(\"update view\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        drawWorld();\n        drawSnake();\n        drawFoodCell();\n        drawStatusText();\n    }\n    var startTime;\n    function loopCallback(timestamp) {\n        if (!startTime) {\n            startTime = timestamp;\n        }\n        var diffTime = timestamp - startTime;\n        if (isGameEnd()) {\n            window.cancelAnimationFrame(rafId);\n        }\n        else {\n            if (diffTime >= INTERVAL_TIME || diffTime === 0) {\n                startTime = timestamp;\n                updatedView();\n            }\n            rafId = window.requestAnimationFrame(loopCallback);\n        }\n    }\n    function loopStart() {\n        window.requestAnimationFrame(loopCallback);\n    }\n    updatedView();\n});\n\n\n//# sourceURL=webpack://www/./index.ts?");

/***/ }),

/***/ "./utils/rng.js":
/*!**********************!*\
  !*** ./utils/rng.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"rng\": () => (/* binding */ rng)\n/* harmony export */ });\nfunction rng(num) {\n  return (Math.random() * num) | 0;\n}\n\n\n//# sourceURL=webpack://www/./utils/rng.js?");

/***/ }),

/***/ "../pkg/jxlust_snake_game_bg.wasm":
/*!****************************************!*\
  !*** ../pkg/jxlust_snake_game_bg.wasm ***!
  \****************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__.p + \"1df1d0672ad36d2dd0b2.wasm\";\n\n//# sourceURL=webpack://www/../pkg/jxlust_snake_game_bg.wasm?");

/***/ })

}]);